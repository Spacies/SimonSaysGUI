
package simonsays.gameModel;

import java.io.InputStreamReader;
import java.util.Scanner;

/**
 *
 * @author Sam
 * @modified 05/05/14 Jaimes
 *  Added user prompt to generateMenu()
 */
public class UserInterface 
{
    private boolean menuSelected = false;
    
    public UserInterface()
    {
        
    }
    
    public int generateMenu()
    {
        //Print out menu options
        printDivider();
        System.out.println("Please make a selection(1 - 5):");
        System.out.println("1. Start game");
        System.out.println("2. Instructions");
        System.out.println("3. Settings");
        System.out.println("4. High Scores");
        System.out.println("5. Exit"); 
        printDivider();
        // User input prompt 
        System.out.print(">");
        //Declare and initialise new scanner
        Scanner menuScanner = new Scanner(new InputStreamReader(System.in));
        //Declare and initalise int variable for storing menu input
        int menuInput = 0;
        //Loop to run while input is not valid
        while(menuInput < 1 || menuInput > 5)
        {
            //Check if input is integer
            if(menuScanner.hasNextInt())
            {
                //Store input as integer variable
                menuInput = menuScanner.nextInt(); 
                if(!(menuInput>0&&menuInput<6))
                {
                  System.out.println("Please enter a valid input");                  
                }
            }
            else
            {
                //Print out statement requesting valid input
                System.out.println("Please enter a valid input");
                //Move scanner to next line if input is not valid
                menuScanner.nextLine();
            }          
        }
        //menuScanner.close();
        return menuInput;      
    }
    
    public void printDivider()
    {
        String symbol = "*";
        for(int i = 0; i < 90; i++)
        {
            symbol += "*";
        }
        System.out.println(symbol);   
    }
    
    public void printInstructions()
    {
        boolean instructionsPrinted = false;
        boolean cancelInstructions = false;
        Scanner instructionScanner = new Scanner(new InputStreamReader(System.in));
        while(!cancelInstructions)
        {
            if(!instructionsPrinted)
            {
                /*
                The game has four numbers (1, 3, 5 and 7) each corresponding to, and 
                producing, a particular tone when it is pressed or generated by the game. 
                A round in the game consists of playing one or more numbers/tones in a random order, 
                after which the player must reproduce that order by entering 
                the corresponding number keys. As the game progresses, the number of keys 
                to enter increases.
                */
                
                System.out.println("Simon Says");
                System.out.println("A musical memory game.");
                System.out.println("");
                System.out.println("Instructions:");
                System.out.println("The game displays a random output (1, 3, 5 or 7) and plays a corresponding tone.");
                System.out.println("The player enters the corresponding digit using the number keys.");
                System.out.println("The game continues adding additional outputs until the player makes an error.");
                System.out.println("The aim is to correctly reproduce the growing sequences.");
                System.out.println("");
                System.out.println("Input is entered by pressing 1, 3, 5 or 7 followed by the Enter key.");
                System.out.println("Multiple inputs on a single line, seperated by spaces, can also be entered.");
                System.out.println("");
                System.out.println("Enter any value to continue.");
                printDivider();
                //Input prompt
                System.out.print(">");
                instructionsPrinted = true;
            }
            if(instructionScanner.hasNext())
            {
                instructionScanner.nextLine();
                cancelInstructions = true;            
            }           
        }
    }
    
    public Difficulty changeSettings(Difficulty difficulty)
    {
        Difficulty updateDifficulty = difficulty;
        //Print out menu options
        System.out.println("Please select a difficulty:");
        System.out.println("1. Easy");
        System.out.println("2. Normal");
        System.out.println("3. Hard");
        printDivider();
        // User input prompt 
        System.out.print(">");
        //Declare and initialise new scanner
        Scanner settingsScanner = new Scanner(new InputStreamReader(System.in));
        //Declare and initalise int variable for storing menu input
        int settingsInput = 0;
        //Loop to run while input is not valid
        while(settingsInput < 1 || settingsInput > 3)
        {
            //Check if input is integer
            if(settingsScanner.hasNextInt())
            {
                //Store input as integer variable
                settingsInput = settingsScanner.nextInt(); 
                if(!(settingsInput>0&&settingsInput<4))
                {
                  System.out.println("Please enter a valid input");                  
                }
            }
            else
            {
                //Print out statement requesting valid input
                System.out.println("Please enter a valid input");
                //Move scanner to next line if input is not valid
                settingsScanner.nextLine();
            }          
        }
        if(settingsInput == 1)
        {
            updateDifficulty = Difficulty.EASY;
        }
        if(settingsInput == 2)
        {
            updateDifficulty = Difficulty.NORMAL;
        }
        if(settingsInput == 3)
        {
            updateDifficulty = Difficulty.HARD;
        }      
        return updateDifficulty;
    }

}
